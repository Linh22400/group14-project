import React, { useState, useEffect } from 'react';
import profileService from '../services/profileService';
import authService from '../services/authService';
import { useNotification } from '../contexts/NotificationContext';
import AvatarUpload from './AvatarUpload';
import './Profile.css';

const Profile = ({ onUpdateClick }) => {
  const { showNotification } = useNotification();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [uploading, setUploading] = useState(false);

  // Helper function ƒë·ªÉ x·ª≠ l√Ω avatar URL
  const getAvatarUrl = (avatarUrl) => {
    if (!avatarUrl) return null;
    
    // N·∫øu ƒë√£ l√† data URL ho·∫∑c http URL, gi·ªØ nguy√™n
    if (avatarUrl.startsWith('data:') || avatarUrl.startsWith('http')) {
      return avatarUrl;
    }
    
    // N·∫øu l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi, th√™m base URL
    return `http://localhost:3000/api/${avatarUrl.replace(/\\/g, '/')}`;
  };

  useEffect(() => {
    fetchProfile();
  }, []);

  const fetchProfile = async () => {
    try {
      setLoading(true);
      setError('');
      
      const response = await profileService.getProfile();
      const userData = response.data.user;
      
      // ƒê·∫£m b·∫£o avatar URL ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng
      if (userData.avatar && !userData.avatar.startsWith('data:') && !userData.avatar.startsWith('http')) {
        // N·∫øu avatar l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi, th√™m base URL
        userData.avatar = getAvatarUrl(userData.avatar);
      }
      
      setUser(userData);
      
      // C·∫≠p nh·∫≠t localStorage v·ªõi d·ªØ li·ªáu m·ªõi nh·∫•t
      authService.setUser(userData);
    } catch (error) {
      setError(error.message || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin profile');
      console.error('L·ªói khi l·∫•y profile:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = () => {
    fetchProfile();
  };

  const handleAvatarUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // Ki·ªÉm tra file type
    if (!file.type.startsWith('image/')) {
      setError('Vui l√≤ng ch·ªçn file ·∫£nh');
      return;
    }

    // Ki·ªÉm tra file size (5MB)
    if (file.size > 5 * 1024 * 1024) {
      setError('File ·∫£nh kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 5MB');
      return;
    }

    setUploading(true);
    setError('');

    try {
      
      const response = await authService.uploadAvatar(file);
      
      
      // C·∫≠p nh·∫≠t avatar trong user data
      const updatedUser = {
        ...user,
        avatar: response.avatar
      };
      setUser(updatedUser);

      // C·∫≠p nh·∫≠t trong localStorage
      authService.setUser(updatedUser);

      // Th√¥ng b√°o th√†nh c√¥ng
      showNotification('C·∫≠p nh·∫≠t avatar th√†nh c√¥ng! ‚úÖ', 'success');
      setError(''); // Clear any previous errors
      
    } catch (error) {
      const errorMsg = error.message || 'C√≥ l·ªói x·∫£y ra khi upload avatar';
      setError(errorMsg);
      console.error('L·ªói upload avatar:', error);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt h∆°n cho ng∆∞·ªùi d√πng
      let userErrorMsg = errorMsg;
      if (error.message.includes('Unexpected token')) {
        userErrorMsg = 'L·ªói k·∫øt n·ªëi server. Vui l√≤ng th·ª≠ l·∫°i sau.';
        setError(userErrorMsg);
      } else if (error.message.includes('NetworkError')) {
        userErrorMsg = 'L·ªói m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.';
        setError(userErrorMsg);
      } else if (error.message.includes('413')) {
        userErrorMsg = 'File qu√° l·ªõn. Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n 5MB.';
        setError(userErrorMsg);
      }
      
      showNotification(userErrorMsg, 'error');
    } finally {
      setUploading(false);
    }
  };

  if (loading) {
    return (
      <div className="profile-container">
        <div className="loading">ƒêang t·∫£i th√¥ng tin...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="profile-container">
        <div className="error-message">{error}</div>
        <button onClick={handleRefresh} className="retry-button">
          Th·ª≠ l·∫°i
        </button>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="profile-container">
        <div className="error-message">Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng</div>
      </div>
    );
  }

  return (
    <div className="profile-container">
      <div className="profile-card">
        <div className="profile-header">
          <h2>Th√¥ng tin c√° nh√¢n</h2>
          <div className="profile-actions">
            <button onClick={onUpdateClick} className="edit-button">
              ‚úèÔ∏è Ch·ªânh s·ª≠a
            </button>
            <button onClick={handleRefresh} className="refresh-button">
              üîÑ L√†m m·ªõi
            </button>
          </div>
        </div>

        <div className="profile-content">
          <div className="avatar-section">
            <AvatarUpload 
              currentAvatar={user.avatar}
              onAvatarChange={(newAvatar) => {
                const updatedUser = { ...user, avatar: newAvatar };
                setUser(updatedUser);
                authService.setUser(updatedUser);
              }}
              user={user}
            />
          </div>

          <div className="info-group">
            <label>H·ªç t√™n:</label>
            <span className="info-value">{user.name}</span>
          </div>

          <div className="info-group">
            <label>Email:</label>
            <span className="info-value">{user.email}</span>
          </div>

          <div className="info-group">
            <label>Vai tr√≤:</label>
            <span className="info-value role-badge">{user.role}</span>
          </div>

          <div className="info-group">
            <label>Ng√†y t·∫°o:</label>
            <span className="info-value">
              {new Date(user.createdAt).toLocaleDateString('vi-VN')}
            </span>
          </div>

          <div className="info-group">
            <label>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:</label>
            <span className="info-value">
              {new Date(user.updatedAt).toLocaleDateString('vi-VN')}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Profile;